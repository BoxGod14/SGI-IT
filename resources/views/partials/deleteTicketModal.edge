<div id="delete_confirmation" class="popup-overlay">
    <div class="modal modal-delete-ticket">
        <h2>{{ t('generalPages.deleteTicket') }}</h2>
        <div class="content">
            <p>{{ t('generalPages.deleteTicketMessage') }}</p>
            <a href="#" class="btn_primary" id="close_button">{{ t('generalPages.cancel') }}</a>
            <button class="btn_delete" id="delete_button" disabled>{{ t('generalPages.wait') }} 5</button>
        </div>
    </div>
</div>
<script>
    class TicketDeleter {
        constructor() {
            this.openModal = document.getElementById('delete_ticket');
            this.buttonDelete = document.getElementById('delete_button');
            this.buttonClose = document.getElementById('close_button');
            this.buttonDelete.addEventListener('click', this.destroy.bind(this));
            this.openModal.addEventListener('click', this.countdownTrigger.bind(this));
            this.buttonClose.addEventListener('click', this.resetInterval.bind(this));
            this.interval = null;
            this.time = 5;
        }

        countdownTrigger() {
            this.resetInterval();
            this.time = 4;
            const countdown = () => {
                if (this.time > 0) {
                    this.buttonDelete.textContent = `{{ t('generalPages.wait') }} ${this.time}`;
                    this.time--;
                } else {
                    clearInterval(this.interval);
                    this.interval = null;
                    this.buttonDelete.textContent = '{{ t('generalPages.deleteTicket') }}';
                    this.buttonDelete.disabled = false;
                }
            };
            this.interval = setInterval(countdown, 1000);
        }
        /**
         * Funcion para resetear el intervalo y resetear el boton a su estado por defecto
        */
        resetInterval() {
            if (this.interval !== undefined) {
                clearInterval(this.interval);
            }
            this.buttonDelete.textContent = '{{ t('generalPages.wait') }} 5';
            this.buttonDelete.disabled = true;
        }
        /**
         * Funcion para borrar el ticket
        */
        async destroy() {
            const data = {
                ticketId: {{ ticket.id }},
            };
            try {
                const response = await fetch(
                    "{{route('TicketsController.destroy', [ticket.id])}}",
                    {
                        method: 'DELETE',
                        headers: {
                            "X-CSRF-Token": document.querySelector('[name="_csrf"]').value,
                            'Content-Type': 'application/json', // Especificar el tipo de contenido si est√°s enviando datos en formato JSON
                        },
                        body: JSON.stringify(data),
                    }
                );
                if (response.ok) {
                    window.location.href = "{{route('TicketsController.index')}}";
                } else {
                    alert('{{ t('generalPages.responseError') }}');
                }
            } catch (error) {
                alert('{{ t('generalPages.responseError') }}': + error.message);
            }
        }
    }
    
    const ticketDeleter = new TicketDeleter();   
</script>